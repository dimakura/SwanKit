import Foundation

let note = "// NB: This file is autogenerated from `generate/math.swift`. Don't change it manually."

let mathFunctions = [
  ["name": "sin", "name_acc": "vvsin", "doc": "sine function", "initialValues": [0, 1.57080, 3.14159]],
  ["name": "cos", "name_acc": "vvcos", "doc": "cosine function", "initialValues": [0, 1.57080, 3.14159]],
]

func accelerateName(type: String, name: String) -> String {
  if type == "Float" {
    return name + "f"
  }
  return name
}

func generateFunction(type: String, data: [String: Any]) -> String {
  let name = data["name"] as! String
  let accName = accelerateName(type: type, name: data["name_acc"] as! String)
  let template = """
      /// Cloning <doc>.
      public func <name>() -> SWKStorage<T> {
        return cloneWith { newStorage in
          <name_acc>(newStorage.storage, storage, &size32)
        }
      }

      /// In-place <doc>.
      public func <name>_() {
        <name_acc>(storage, storage, &size32)
      }
    """
  return template.replacingOccurrences(of: "<name>", with: name)
                 .replacingOccurrences(of: "<name_acc>", with: accName)
                 .replacingOccurrences(of: "<doc>", with: data["doc"] as! String)
}

func generateBody(type: String) -> String {
  let functions = mathFunctions.map { data in  generateFunction(type: type, data: data) }
  return functions.joined(separator: "\n\n")
}

func extensionGenerator(type: String) -> String {
  let template = """
    <note>

    import Accelerate

    /// SWKStorage extensions for <type>.
    extension SWKStorage where T == <type> {
    <body>
    }\n
    """
  let body = generateBody(type: type)
  return template.replacingOccurrences(of: "<type>", with: type)
                 .replacingOccurrences(of: "<body>", with: body)
                 .replacingOccurrences(of: "<note>", with: note)
}

func generateFunctionSpec(type: String, data: [String: Any]) -> String {
  let name = data["name"] as! String
  let doc = data["doc"] as! String
  let values = data["initialValues"] as! [Double]
  let newStorageComputed = values.enumerated().map { (i, value) in
    "          expect(newStorage[\(i)]).to.eq(<name>(\(values[i])))"
  }
  let originalStorageUnchanged = values.enumerated().map { (i, value) in
    "          expect(storage[\(i)]).to.eq(\(values[i]))"
  }
  let originalStorageUpdated = values.enumerated().map { (i, value) in
    "          expect(storage[\(i)]).to.eq(<name>(\(values[i])))"
  }
  let template = """
      context(\"<doc>\") {
        before {
          storage = SWK<type>Storage(<initial_values>)
        }

        describe(\"#<name>\") {
          var newStorage: SWK<type>Storage!

          before {
            newStorage = storage.<name>()
          }

          it(\"computes a new storage\") {
  <newStorageComputed>
          }

          it(\"keeps original storage unchanged\") {
  <originalStorageUnchanged>
          }
        }

        describe(\"#<name>_\") {
          before {
            storage.<name>_()
          }

          it(\"updates original storage\") {
  <originalStorageUpdated>
          }
        }
      }
  """
  let valuesAsString = "[" + values.map {"\($0)"}.joined(separator: ", ") +  "]"
  return template.replacingOccurrences(of: "<newStorageComputed>", with: newStorageComputed.joined(separator: "\n"))
                 .replacingOccurrences(of: "<originalStorageUnchanged>", with: originalStorageUnchanged.joined(separator: "\n"))
                 .replacingOccurrences(of: "<originalStorageUpdated>", with: originalStorageUpdated.joined(separator: "\n"))
                 .replacingOccurrences(of: "<initial_values>", with: valuesAsString)
                 .replacingOccurrences(of: "<name>", with: name)
                 .replacingOccurrences(of: "<type>", with: type)
                 .replacingOccurrences(of: "<doc>", with: doc)
}

func generateSpecBody(type: String) -> String {
  let template = """
    describe(\"SWK<type>Storage\") {
      var storage: SWK<type>Storage!

  <functions>
    }
  """
  let functions = mathFunctions.map { data in  generateFunctionSpec(type: type, data: data) }
  return template.replacingOccurrences(of: "<type>", with: type)
                 .replacingOccurrences(of: "<functions>", with: functions.joined(separator: "\n\n"))
}

func specGenerator(type: String) -> String {
  let template = """
    <note>

    import SSpec
    import SwanKit
    import Foundation

    func spec_SWK<type>Storage() {
    <body>
    }\n
    """
  let body = generateSpecBody(type: type)
  return template.replacingOccurrences(of: "<type>", with: type)
                 .replacingOccurrences(of: "<body>", with: body)
                 .replacingOccurrences(of: "<note>", with: note)
}

for type in ["Float", "Double"] {
  let extensionCode = extensionGenerator(type: type)
  let specCode = specGenerator(type: type)
  let extensionURL = URL(fileURLWithPath: "Sources/SwanKit/Storage/SWKStorage+\(type).swift")
  let specURL = URL(fileURLWithPath: "Tests/SwanKitTests/Storage/SWK\(type)StorageSpec.swift")
  try extensionCode.write(to: extensionURL, atomically: true, encoding: .utf8)
  try specCode.write(to: specURL, atomically: true, encoding: .utf8)
}
