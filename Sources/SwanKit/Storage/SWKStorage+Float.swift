// NB: autogenerated from Sources/Generator/main.swift

import Accelerate

/// SWKStorage extension for Float.
extension SWKStorage where T == Float {
  /// Cloning cosine function.
  public func cos() -> SWKStorage<T> {
    let newStorage = SWKStorage(size)
    vvcosf(newStorage.storage, storage, &size32)
    return newStorage
  }

  /// In-place cosine function.
  public func cos_() {
    vvcosf(storage, storage, &size32)
  }

  /// Cloning sine function.
  public func sin() -> SWKStorage<T> {
    let newStorage = SWKStorage(size)
    vvsinf(newStorage.storage, storage, &size32)
    return newStorage
  }

  /// In-place sine function.
  public func sin_() {
    vvsinf(storage, storage, &size32)
  }

  /// Cloning tangent function.
  public func tan() -> SWKStorage<T> {
    let newStorage = SWKStorage(size)
    vvtanf(newStorage.storage, storage, &size32)
    return newStorage
  }

  /// In-place tangent function.
  public func tan_() {
    vvtanf(storage, storage, &size32)
  }

  /// Cloning arccosine function.
  public func acos() -> SWKStorage<T> {
    let newStorage = SWKStorage(size)
    vvacosf(newStorage.storage, storage, &size32)
    return newStorage
  }

  /// In-place arccosine function.
  public func acos_() {
    vvacosf(storage, storage, &size32)
  }

  /// Cloning arcsine function.
  public func asin() -> SWKStorage<T> {
    let newStorage = SWKStorage(size)
    vvasinf(newStorage.storage, storage, &size32)
    return newStorage
  }

  /// In-place arcsine function.
  public func asin_() {
    vvasinf(storage, storage, &size32)
  }

  /// Cloning arctangent function.
  public func atan() -> SWKStorage<T> {
    let newStorage = SWKStorage(size)
    vvatanf(newStorage.storage, storage, &size32)
    return newStorage
  }

  /// In-place arctangent function.
  public func atan_() {
    vvatanf(storage, storage, &size32)
  }

  /// Cloning hyperbolic cosine function.
  public func cosh() -> SWKStorage<T> {
    let newStorage = SWKStorage(size)
    vvcoshf(newStorage.storage, storage, &size32)
    return newStorage
  }

  /// In-place hyperbolic cosine function.
  public func cosh_() {
    vvcoshf(storage, storage, &size32)
  }

  /// Cloning hyperbolic sine function.
  public func sinh() -> SWKStorage<T> {
    let newStorage = SWKStorage(size)
    vvsinhf(newStorage.storage, storage, &size32)
    return newStorage
  }

  /// In-place hyperbolic sine function.
  public func sinh_() {
    vvsinhf(storage, storage, &size32)
  }

  /// Cloning hyperbolic tangent function.
  public func tanh() -> SWKStorage<T> {
    let newStorage = SWKStorage(size)
    vvtanhf(newStorage.storage, storage, &size32)
    return newStorage
  }

  /// In-place hyperbolic tangent function.
  public func tanh_() {
    vvtanhf(storage, storage, &size32)
  }

  /// Cloning inverse hyperbolic cosine function.
  public func acosh() -> SWKStorage<T> {
    let newStorage = SWKStorage(size)
    vvacoshf(newStorage.storage, storage, &size32)
    return newStorage
  }

  /// In-place inverse hyperbolic cosine function.
  public func acosh_() {
    vvacoshf(storage, storage, &size32)
  }

  /// Cloning inverse hyperbolic sine function.
  public func asinh() -> SWKStorage<T> {
    let newStorage = SWKStorage(size)
    vvasinhf(newStorage.storage, storage, &size32)
    return newStorage
  }

  /// In-place inverse hyperbolic sine function.
  public func asinh_() {
    vvasinhf(storage, storage, &size32)
  }

  /// Cloning inverse hyperbolic tangent function.
  public func atanh() -> SWKStorage<T> {
    let newStorage = SWKStorage(size)
    vvatanhf(newStorage.storage, storage, &size32)
    return newStorage
  }

  /// In-place inverse hyperbolic tangent function.
  public func atanh_() {
    vvatanhf(storage, storage, &size32)
  }

}
