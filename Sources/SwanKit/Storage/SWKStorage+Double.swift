// NB: This file is autogenerated from `generate/math.swift`. Don't change it manually.

import Accelerate

/// SWKStorage extensions for Double.
extension SWKStorage where T == Double {
  /// Cloning cosine function.
  public func cos() -> SWKStorage<T> {
    return cloneWith { newStorage in
      vvcos(newStorage.storage, storage, &size32)
    }
  }

  /// In-place cosine function.
  public func cos_() {
    vvcos(storage, storage, &size32)
  }

  /// Cloning sine function.
  public func sin() -> SWKStorage<T> {
    return cloneWith { newStorage in
      vvsin(newStorage.storage, storage, &size32)
    }
  }

  /// In-place sine function.
  public func sin_() {
    vvsin(storage, storage, &size32)
  }

  /// Cloning tangent function.
  public func tan() -> SWKStorage<T> {
    return cloneWith { newStorage in
      vvtan(newStorage.storage, storage, &size32)
    }
  }

  /// In-place tangent function.
  public func tan_() {
    vvtan(storage, storage, &size32)
  }

  /// Cloning arccosine function.
  public func acos() -> SWKStorage<T> {
    return cloneWith { newStorage in
      vvacos(newStorage.storage, storage, &size32)
    }
  }

  /// In-place arccosine function.
  public func acos_() {
    vvacos(storage, storage, &size32)
  }

  /// Cloning arcsine function.
  public func asin() -> SWKStorage<T> {
    return cloneWith { newStorage in
      vvasin(newStorage.storage, storage, &size32)
    }
  }

  /// In-place arcsine function.
  public func asin_() {
    vvasin(storage, storage, &size32)
  }

  /// Cloning arctangent function.
  public func atan() -> SWKStorage<T> {
    return cloneWith { newStorage in
      vvatan(newStorage.storage, storage, &size32)
    }
  }

  /// In-place arctangent function.
  public func atan_() {
    vvatan(storage, storage, &size32)
  }

  /// Cloning hyperbolic cosine function.
  public func cosh() -> SWKStorage<T> {
    return cloneWith { newStorage in
      vvcosh(newStorage.storage, storage, &size32)
    }
  }

  /// In-place hyperbolic cosine function.
  public func cosh_() {
    vvcosh(storage, storage, &size32)
  }

  /// Cloning hyperbolic sine function.
  public func sinh() -> SWKStorage<T> {
    return cloneWith { newStorage in
      vvsinh(newStorage.storage, storage, &size32)
    }
  }

  /// In-place hyperbolic sine function.
  public func sinh_() {
    vvsinh(storage, storage, &size32)
  }

  /// Cloning hyperbolic tangent function.
  public func tanh() -> SWKStorage<T> {
    return cloneWith { newStorage in
      vvtanh(newStorage.storage, storage, &size32)
    }
  }

  /// In-place hyperbolic tangent function.
  public func tanh_() {
    vvtanh(storage, storage, &size32)
  }

  /// Cloning inverse hyperbolic cosine function.
  public func acosh() -> SWKStorage<T> {
    return cloneWith { newStorage in
      vvacosh(newStorage.storage, storage, &size32)
    }
  }

  /// In-place inverse hyperbolic cosine function.
  public func acosh_() {
    vvacosh(storage, storage, &size32)
  }

  /// Cloning inverse hyperbolic sine function.
  public func asinh() -> SWKStorage<T> {
    return cloneWith { newStorage in
      vvasinh(newStorage.storage, storage, &size32)
    }
  }

  /// In-place inverse hyperbolic sine function.
  public func asinh_() {
    vvasinh(storage, storage, &size32)
  }

  /// Cloning inverse hyperbolic tangent function.
  public func atanh() -> SWKStorage<T> {
    return cloneWith { newStorage in
      vvatanh(newStorage.storage, storage, &size32)
    }
  }

  /// In-place inverse hyperbolic tangent function.
  public func atanh_() {
    vvatanh(storage, storage, &size32)
  }
}
