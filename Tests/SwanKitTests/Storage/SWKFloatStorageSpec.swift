// NB: This file is autogenerated from `generate/math.swift`. Don't change it manually.

import SSpec
import SwanKit
import Foundation

func spec_SWKFloatStorage() {
  describe("SWKFloatStorage") {
    var storage: SWKFloatStorage!

    context("sine function") {
      before {
        storage = SWKFloatStorage([0.0, 1.5708, 3.14159])
      }

      describe("#sin") {
        var newStorage: SWKFloatStorage!

        before {
          newStorage = storage.sin()
        }

        it("computes a new storage") {
          expect(newStorage[0]).to.eq(sin(0.0))
          expect(newStorage[1]).to.eq(sin(1.5708))
          expect(newStorage[2]).to.eq(sin(3.14159))
        }

        it("keeps original storage unchanged") {
          expect(storage[0]).to.eq(0.0)
          expect(storage[1]).to.eq(1.5708)
          expect(storage[2]).to.eq(3.14159)
        }
      }

      describe("#sin_") {
        before {
          storage.sin_()
        }

        it("updates original storage") {
          expect(storage[0]).to.eq(sin(0.0))
          expect(storage[1]).to.eq(sin(1.5708))
          expect(storage[2]).to.eq(sin(3.14159))
        }
      }
    }

    context("cosine function") {
      before {
        storage = SWKFloatStorage([0.0, 1.5708, 3.14159])
      }

      describe("#cos") {
        var newStorage: SWKFloatStorage!

        before {
          newStorage = storage.cos()
        }

        it("computes a new storage") {
          expect(newStorage[0]).to.eq(cos(0.0))
          expect(newStorage[1]).to.eq(cos(1.5708))
          expect(newStorage[2]).to.eq(cos(3.14159))
        }

        it("keeps original storage unchanged") {
          expect(storage[0]).to.eq(0.0)
          expect(storage[1]).to.eq(1.5708)
          expect(storage[2]).to.eq(3.14159)
        }
      }

      describe("#cos_") {
        before {
          storage.cos_()
        }

        it("updates original storage") {
          expect(storage[0]).to.eq(cos(0.0))
          expect(storage[1]).to.eq(cos(1.5708))
          expect(storage[2]).to.eq(cos(3.14159))
        }
      }
    }
  }
}
